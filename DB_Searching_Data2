unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Grids, DBGrids, Provider, DB, DBClient, ADODB, Menus,
  ExtCtrls, cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters,
  cxStyles, dxSkinsCore, dxSkinBlack, dxSkinBlue, dxSkinBlueprint,
  dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide,
  dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinOffice2010Black,
  dxSkinOffice2010Blue, dxSkinOffice2010Silver, dxSkinPumpkin, dxSkinSeven,
  dxSkinSevenClassic, dxSkinSharp, dxSkinSharpPlus, dxSkinSilver,
  dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008,
  dxSkinTheAsphaltWorld, dxSkinsDefaultPainters, dxSkinValentine,
  dxSkinVS2010, dxSkinWhiteprint, dxSkinXmas2008Blue, dxSkinscxPCPainter,
  cxCustomData, cxFilter, cxData, cxDataStorage, cxEdit, cxNavigator,
  cxDBData, cxGridCustomTableView, cxGridTableView, cxGridDBTableView,
  cxGridLevel, cxClasses, cxGridCustomView, cxGrid, ComCtrls;

type
  TForm1 = class(TForm)
    ADOConnection1: TADOConnection;
    ADOQuery1: TADOQuery;
    dsDBList: TClientDataSet;
    SourDBList: TDataSource;
    DataSetProvider1: TDataSetProvider;
    DBGrid1: TDBGrid;
    Label1: TLabel;
    edtServerName: TEdit;
    btnConnect: TButton;
    btnDBListSearch: TButton;
    ADOConnection2: TADOConnection;
    ADOQuery2: TADOQuery;
    DataSetProvider2: TDataSetProvider;
    dsSearch: TClientDataSet;
    SourSearch: TDataSource;
    btnSearch: TButton;
    DBGrid2: TDBGrid;
    Label2: TLabel;
    edtFindFieldName: TEdit;
    Label3: TLabel;
    Memo: TMemo;
    lbCount: TLabel;
    lbResultCount: TLabel;
    lsAllResult: TClientDataSet;
    lsAllResultFieldName: TStringField;
    Label4: TLabel;
    SourAllResult: TDataSource;
    cxGridVw: TcxGridDBTableView;
    cxGridLv: TcxGridLevel;
    cxGrid: TcxGrid;
    cxGridVwFieldName: TcxGridDBColumn;
    ProgressBar: TProgressBar;
    Label6: TLabel;
    lbGroupCount: TLabel;
    btnReset: TButton;
    procedure FormShow(Sender: TObject);
    procedure btnConnectClick(Sender: TObject);
    procedure btnDBListSearchClick(Sender: TObject);
    procedure btnSearchClick(Sender: TObject);
    procedure btnResetClick(Sender: TObject);
  private
    procedure Search_Query; 
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.FormShow(Sender: TObject);
begin
  ADOConnection1.Connected := False;
  ADOConnection2.Connected := False;

  lsAllResult.CreateDataSet;
end;

procedure TForm1.btnConnectClick(Sender: TObject);
begin
  ADOConnection1.ConnectionString := 'Provider=SQLOLEDB.1;Password=data60;Persist Security Info=True;User ID=sa;Initial Catalog=master;'
                                   + 'Data Source=' + edtServerName.Text + ';';

  ADOConnection1.Connected := True;
end;

procedure TForm1.btnDBListSearchClick(Sender: TObject);
var sql: String;
begin
  sql := 'select name '
       +      'from sysdatabases '
       +     'where status & 512 = 0'  // status�� 512�� �ƴ� �����ͺ��̽��� ������ (�¶��� ����) '
       +       'and len(name) = 6 '
       +       'and name not like "RJ_%" '
       +       'and name not like "AJ_%" '
       +       'and name not like "PJ_%" '
       +       'and name not like "%Gps%" '
       +       'and name not in ("tempdb", "master") '
       +  'order by name ';
  sql := StringReplace(sql, '"', '''', [rfReplaceAll]);
  dsDBList.Close;
  dsDBList.CommandText := sql;
  dsDBList.Open;

  lbCount.Caption := IntToStr(dsDBList.RecordCount);
end;

procedure TForm1.btnSearchClick(Sender: TObject);
var
  strServerName, strDBName, strName: String;
  intTotalCount: Integer;
begin
  Memo.Clear;

  ProgressBar.Position := 0;
  ProgressBar.Max := dsDBList.RecordCount;

  dsDBList.First;
  while not dsDBList.Eof do
    begin
      ProgressBar.Position := dsDBList.RecNo;

      strServerName := edtServerName.Text;
      strDBName     := dsDBList.FieldByName('name').AsString;


      ADOConnection2.Connected := False;
      ADOConnection2.ConnectionString := 'Provider=SQLOLEDB.1;Password=data60;Persist Security Info=True;User ID=sa;Initial '
                                       + 'Catalog=' + strDBName + ';'
                                       + 'Data Source=' + strServerName + ';';
      try
        ADOConnection2.Connected := True;
      except
        Memo.Lines.Add(strServerName + ' ' + strDBName + ' - ' + 'DB������з� �ǳʶ�');
        dsDBList.Next;
      end;

      Search_Query;
      if dsSearch.RecordCount > 0 then
        begin
          intTotalCount := intTotalCount + dsSearch.RecordCount;

          Memo.Lines.Add(strServerName + ' ' + strDBName + ' [' + IntToStr(dsSearch.RecordCount) + ']');

          dsSearch.First;
          while not dsSearch.Eof do
            begin
              strName := Format('%-26s TYPE %-8s LENGTH %-3s', [dsSearch.FieldByName('table_name').AsString,
                                                                dsSearch.FieldByName('data_type').AsString,
                                                                dsSearch.FieldByName('character_maximum_length').AsString]);
              Memo.Lines.Add(strName);

              if not lsAllResult.FindKey([dsSearch.FieldByName('table_name').AsString]) then
                begin
                  lsAllResult.Append;
                  lsAllResultFieldName.AsString := dsSearch.FieldByName('table_name').AsString;
                end;

              if dsSearch.RecordCount = dsSearch.RecNo then Memo.Lines.Add('�������������������������������������');

              dsSearch.Next;
            end;
        end;

      if dsDBList.RecordCount = dsDBList.RecNo then
        begin
          ADOConnection1.Connected := False;
          ADOConnection2.Connected := False;

          ShowMessage('�۾� �Ϸ� && ���� ���� ����');
        end;

      dsDBList.Next;
    end;

  lbResultCount.Caption := IntToStr(intTotalCount);
  lbGroupCount.Caption  := IntToStr(lsAllResult.RecordCount);
end;

procedure TForm1.Search_Query;
var sql: String;
begin
  sql := 'select TABLE_NAME, COLUMN_NAME, IS_NULLABLE, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH '
       +      'from INFORMATION_SCHEMA.COLUMNS '
       +     'where COLUMN_NAME = "jisi_beonho" ';

  sql := StringReplace(sql, '"', '''', [rfReplaceAll]);
  dsSearch.Close;
  dsSearch.CommandText := sql;
  dsSearch.Open;
end;

procedure TForm1.btnResetClick(Sender: TObject);
begin
  lsAllResult.EmptyDataSet;
  cxGrid.SetFocus;
end;

end.
