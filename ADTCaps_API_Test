unit Unit1;

interface

uses
  IdHTTP, IdSSLOpenSSL, System.JSON, REST.Response.Adapter,
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Data.DB, Vcl.Grids,
  Vcl.DBGrids, Datasnap.DBClient, Vcl.ExtCtrls, cxGraphics, cxControls,
  cxLookAndFeels, cxLookAndFeelPainters, cxStyles, cxCustomData, cxFilter, cxData, cxDataStorage, cxEdit,
  cxNavigator, dxDateRanges, cxClasses, dxSkinsCore, dxSkinBlack, dxSkinBlue,
  dxSkinBlueprint, dxSkinCaramel, dxSkinCoffee, dxSkinDarkroom, dxSkinDarkSide,
  dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMetropolis,
  dxSkinMetropolisDark, dxSkinMoneyTwins, dxSkinOffice2007Black,
  dxSkinOffice2007Blue, dxSkinOffice2007Green, dxSkinOffice2007Pink,
  dxSkinOffice2007Silver, dxSkinOffice2010Black, dxSkinOffice2010Blue,
  dxSkinOffice2010Silver, dxSkinOffice2013DarkGray, dxSkinOffice2013LightGray,
  dxSkinOffice2013White, dxSkinOffice2016Colorful, dxSkinOffice2016Dark,
  dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic, dxSkinSharp, dxSkinSharpPlus,
  dxSkinSilver, dxSkinSpringtime, dxSkinStardust, dxSkinSummer2008,
  dxSkinTheAsphaltWorld, dxSkinTheBezier, dxSkinsDefaultPainters,
  dxSkinValentine, dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark,
  dxSkinVisualStudio2013Light, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, cxDataControllerConditionalFormattingRulesManagerDialog,
  cxDBData, cxGridLevel, cxGridCustomView, cxGridCustomTableView,
  cxGridTableView, cxGridDBTableView, cxGrid;


type
  TForm1 = class(TForm)
    Memo1: TMemo;
    lsResponse: TClientDataSet;
    DataSource1: TDataSource;
    DBGrid1: TDBGrid;
    Panel1: TPanel;
    Button1: TButton;
    Splitter1: TSplitter;
    procedure Button1Click(Sender: TObject);
  private
    kindOfApi: String;
    kindOfValue: String;
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.Button1Click(Sender: TObject);
var rqStream: TStringStream;
    rsStream: TBytesStream;

    idhttpGps: TIdHTTP;
    SSLIO: TIdSSLIOHandlerSocketOpenSSL;

    jArray: TJSONArray;
    jResponse: TJSonObject;

    restResDataSetAdapter: TRESTResponseDataSetAdapter;
    restResJSON: TRESTResponseJSON;

    sUrl, sRequest: String;
    loop: Integer;
    test: String;
begin


  kindOfApi := 'reqCarInfo'; //�ǽð�����
//  sRequest := '{"authKey": "0x0100000060D62AC87E7A9D69365120C7937384E3A337F02561D9232A54A4DA38FD830D**", "reqTyp":"a" }'; //�������
  sRequest := '{"authKey": "0x0100000060D62AC87E7A9D69365120C7937384E3A337F02561D9232A54A4DA38FD830D**", "reqTyp":"s", "spotNm":"��ƾƽ����ֽ�ȸ��" }'; //������

//  kindOfApi := 'reqDrvHst'; //����
//  sRequest := '{"authKey": "0x0100000060D62AC87E7A9D69365120C7937384E3A337F02561D9232A54A4DA38FD830D**", "reqTyp":"i", "stDt":"2023-05-16 15:13:18", "edDt":"2023-05-16 16:52:42", "carId":"68217" }'; //�������

//  kindOfApi := 'reqDrvGps';
//  sRequest  := '{"authKey": "0x0100000060D62AC87E7A9D69365120C7937384E3A337F02561D9232A54A4DA38FD830D**", "drvId":"158343335" }';


  sUrl := 'https://lora-web.sksmartlink.com:447/cust/' + kindOfApi;

  //------------------------------------------�׽�Ʈ�� �̾Ʒ��� ���۵��ϴ� �����̹Ƿ� �ǵ帱�ʿ� X---------------------------------------------
  jResponse := TJSONObject.Create;
  jArray    := TJSONArray.Create;

  rsStream  := TBytesStream.Create;
  rqStream := TStringStream.Create(sRequest, TEncoding.UTF8);
  rqStream.Position := 0;

  SSLIO                        := TIdSSLIOHandlerSocketOpenSSL.Create;
  SSLIO.SSLOptions.Method      := sslvTLSv1;
//  SSLIO.SSLOptions.SSLVersions := [sslvTLSv1, sslvTLSv1_1, sslvTLSv1_2];

  idhttpGps                     := TIdHTTP.Create;
  idhttpGps.Request.ContentType := 'application/json';
  idhttpGps.IOHandler           := SSLIO;
  idhttpGps.ConnectTimeout      := 100000;
  idhttpGps.ReadTimeout         := 100000;

  try
    idhttpGps.Post(sUrl, rqStream, rsStream);
    Memo1.Text := idhttpGps.Post(sUrl, rqStream);

    if kindOfApi = 'reqCarInfo' then kindOfValue := 'cars';
    if kindOfApi = 'reqDrvHst'  then kindOfValue := 'drvHsts';
    if kindOfApi = 'reqDrvGps'  then kindOfValue := 'gps';

    jResponse := TJSONObject.ParseJSONValue( TEncoding.UTF8.GetString(rsStream.Bytes, 0, rsStream.Size)) as TJSONObject;
    jArray := TJSONObject.ParseJSONValue(jResponse.GetValue(kindOfValue).ToString) as TJSONArray;

    restResDataSetAdapter              := TRESTResponseDataSetAdapter.Create(nil);
    restResJSON                        := TRESTResponseJSON.Create(nil);
    restResDataSetAdapter.Dataset      := lsResponse;
    restResDataSetAdapter.ResponseJSON := nil;
    restResJSON.SetJSONValue(jArray, True);
    restResDataSetAdapter.ResponseJSON := restResJSON;
    restResDataSetAdapter.Active       := True;
  except on E: Exception do
    begin
      ShowMessage(E.Message);
    end;
  end;

  for loop := 0 to DBGrid1.Columns.Count - 1 do
    begin
      DBGrid1.Columns.Items[loop].Width := 110;
    end;

  rqStream.Free;
  idhttpGps.Free;
  SSLIO.Free;
end;

end.
