unit Unit1;

interface

uses
  System.Threading,
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.Grids, Vcl.DBGrids,
  Datasnap.DBClient, Vcl.StdCtrls;

type
  TForm1 = class(TForm)
    Button1: TButton;
    ClientDataSet1: TClientDataSet;
    DataSource1: TDataSource;
    DBGrid1: TDBGrid;
    ClientDataSet1No: TIntegerField;
    Label2: TLabel;
    Button2: TButton;
    Label3: TLabel;
    Button3: TButton;
    Label4: TLabel;
    Label1: TLabel;
    Button4: TButton;
    Label5: TLabel;
    Memo1: TMemo;
    procedure FormShow(Sender: TObject);

    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}
//��������Ʈ: https://docwiki.embarcadero.com/RADStudio/Rio/en/Using_TTask_from_the_Parallel_Programming_Library

procedure TForm1.Button1Click(Sender: TObject);
var loop: Integer;
begin
  for loop := 1 to 10000 do
    begin
      ClientDataSet1.Append;
      ClientDataSet1No.AsInteger := loop;
    end;
  ClientDataSet1.Post;
end;

procedure TForm1.Button2Click(Sender: TObject);
var aTask: ITask; //task ������ System.Threading�� uses �ؾ���.
begin
  aTask := TTask.Create(
    procedure
    begin
      sleep(1000 * 5);
      TThread.Synchronize(TThread.Current,
        procedure
        begin
          ShowMessage('UI�� �����ʾҾ�!!');
        end);
    end);
  aTask.Start;
end;

procedure TForm1.Button3Click(Sender: TObject);
begin
  Sleep(1000 * 5);
  ShowMessage('UI�� �ǲ� �����!!');
end;

procedure TForm1.FormShow(Sender: TObject);
begin
  ClientDataSet1.CreateDataSet;
end;

procedure TForm1.Button4Click(Sender: TObject);
var tasks: array of ITask;
    value: Integer;
begin
  SetLength(tasks, 3);

  //3�ʰɸ�
  tasks[0] := TTask.Create(procedure ()
                           begin
                             sleep(1000 * 3);
                             value := 3;
                           end);
  tasks[0].Start;

  //5�ʰɸ�
  tasks[1] := TTask.Create(procedure ()
                           begin
                             sleep(1000 * 5);
                             value := 5;
                           end);
  tasks[1].Start;

  //6�ʰɸ�
  tasks[2] := TTask.Create(procedure ()
                           begin
                             sleep(1000 * 6);
                             value := 6;
                           end);
  tasks[2].Start;

  TTask.WaitForAll(tasks); //������ ���ÿ� ����ǰ����� �����½���.
  ShowMessage('All done: ' + IntToStr(value));

  { ���� �������α׷����� 3�� + 5�� + 6�� = 14�� �ɷ����ϴµ�, Task�� ���ôٹ������Ͽ� ���������� 6�ʸ��� ��� ó���� }
end;

end.
